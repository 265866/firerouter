#!/bin/bash

init_network_config() {
  _rc=0
  redis-cli set "fireboot:status" "apply_network"
  echo "Awaiting FireRouter API available ..."
  sleep 3
  timeout=3
  api_ready=0
  while [[ timeout -gt 0 && api_ready -eq 0 ]]
  do
    HTTP_STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/phy_interfaces' -XGET`
    if [[ $HTTP_STATUS_CODE != 200 ]]; then
      sleep 10
    else
      api_ready=1
    fi
    ((timeout-=1))
  done

  if [[ $api_ready -eq 0 ]]; then
    _rc=1
  fi

  test $_rc -eq  0 || return $_rc
  echo "FireRouter API is available"

  redis-cli set "fireboot:status" "apply_network"
  echo "Applying last successful network config ..."

  if [[ ! -f /dev/shm/firerouter.prepared ]]; then
    echo "Preparing network environment ..."
    HTTP_STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/prepare_env' -XPOST -H 'Content-Type: application/json' -d {}`
    if [[ $HTTP_STATUS_CODE != "200" ]]; then
      echo "Failed to prepare environment"
      _rc=2
    else
      touch /dev/shm/firerouter.prepared
    fi
  fi

  test $_rc -eq  0 || return $_rc

  HTTP_STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/apply_current_config' -XPOST -H 'Content-Type: application/json' -d {}`
  if [[ $HTTP_STATUS_CODE != "200" ]]; then
    echo "Failed to apply current config"
    _rc=2
  fi

  test $_rc -eq  0 || return $_rc

  echo "Successfully apply last network config"

  test_network
}

test_network() {
  redis-cli set "fireboot:status" "test_network"
  echo "Testing network connectivity ..."

  retry=30
  while [[ $retry -gt 0 ]]; do
    redis-cli set "fireboot:status:code" $retry
    sleep 3;
    (( retry-- ))

    if ! nc -w 5 -z 1.1.1.1 443; then
        echo "Unable to reach 1.1.1.1, trying 8.8.8.8 ..."
        if ! nc -w 5 -z 8.8.8.8 53; then
          echo "Unable to reach 8.8.8.8"
          _rc=3
          continue
        fi
    fi

    if ! nslookup -timeout=5 github.com; then
         echo "DNS is unavailable"
         _rc=4
         continue
    fi

    _rc=0
    break;
  done
  test $_rc -eq 0 || return $_rc
  echo "Network connectivity test succeeded"
}

update_timezone() {
  FW_TIMEZONE=$(redis-cli hget sys:config timezone)
  FW_ACTUAL_TIMEZONE=$(cat /etc/timezone)
  if [[ "x$FW_TIMEZONE" != "x" && "x$FW_TIMEZONE" != "x$FW_ACTUAL_TIMEZONE" ]]; then
    sudo timedatectl set-timezone $FW_TIMEZONE
    sudo systemctl restart cron.service # this is to ensure cron jobs are set to the right timezone
    sudo systemctl restart rsyslog
  fi
}