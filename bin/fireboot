#!/bin/bash

_rc=0

# step 1 - awaiting firerouter API available
echo "Awaiting FireRouter API available ..."
sleep 5
timeout=3
api_ready=0
while [[ timeout -gt 0 && api_ready -eq 0 ]]
do
  HTTP_STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/phy_interfaces' -XGET`
  if [[ $HTTP_STATUS_CODE != 200 ]]; then
    sleep 10
  else
    api_ready=1
  fi
  ((timeout-=1))
done

if [[ $api_ready -eq 0 ]]; then
  _rc=1
fi

test $_rc -eq  0 || exit $_rc
echo "FireRouter API is available"

# step 2 - apply network config
echo "Applying last successful network config..."

HTTP_STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/prepare_env' -XPOST -H 'Content-Type: application/json' -d {}`
if [[ $HTTP_STATUS_CODE != "200" ]]; then
  echo "Failed to prepare environment"
  _rc=2
fi

test $_rc -eq  0 || exit $_rc

HTTP_STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" 'http://localhost:8837/v1/config/apply_current_config' -XPOST -H 'Content-Type: application/json' -d {}`
if [[ $HTTP_STATUS_CODE != "200" ]]; then
  echo "Failed to apply current config"
  _rc=2
fi

test $_rc -eq  0 || exit $_rc

echo "Successfully apply last network config..."

# step 3 - test network connectivity
echo "Testing network connectivity..."
nc -z 1.1.1.1 443 || (echo "err: network is unavailable" && _rc=3)
dig github.com || (echo "err: dns is unavailable" && _rc=4)

test $_rc -eq  0 || exit $_rc

# step 4 - start fireupgrade
echo "Starting Fireupgrade..."
sudo systemctl start fireupgrade

# step 5 - start fireupgrade
echo "Starting Firewalla..."
sudo systemctl start firewalla

exit 0
